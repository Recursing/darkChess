{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/chess.ts","../../src/WebRTCConnection.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    let unsubscribe;\n    if (is_crossorigin()) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        detach(iframe);\n        if (unsubscribe)\n            unsubscribe();\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next, lookup.has(block.key));\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.22.3' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","const enum BoardInfo {\n  PADDING = 2,\n  BOARD_SIDE = 8 + 2 * PADDING,\n  A8 = BOARD_SIDE * PADDING + PADDING,\n  H8 = A8 + 7,\n  A1 = A8 + 7 * BOARD_SIDE,\n  H1 = A1 + 7,\n}\n\nfunction padPosition(pos: number): number {\n  let row = Math.floor(pos / 8);\n  let col = pos % 8;\n  let padded_row = row + BoardInfo.PADDING;\n  let padded_col = col + BoardInfo.PADDING;\n  return padded_row * BoardInfo.BOARD_SIDE + padded_col;\n}\n\nfunction unpadPosition(pos: number): number {\n  let row = Math.floor(pos / BoardInfo.BOARD_SIDE);\n  let col = pos % BoardInfo.BOARD_SIDE;\n  let unPaddedRow = row - BoardInfo.PADDING;\n  let unPaddedCol = col - BoardInfo.PADDING;\n  return unPaddedRow * 8 + unPaddedCol;\n}\n\nconst enum Direction {\n  North = -BoardInfo.BOARD_SIDE,\n  East = 1,\n  South = BoardInfo.BOARD_SIDE,\n  West = -1,\n}\n\nconst enum Piece {\n  Pawn,\n  Knight,\n  Bishop,\n  Rook,\n  Queen,\n  King,\n  Empty,\n}\n\nconst enum SquareColor {\n  MyPiece,\n  OpponentPiece,\n  Empty,\n  Wall,\n}\n\ntype PieceName =\n  | \"pawn\"\n  | \"knight\"\n  | \"bishop\"\n  | \"rook\"\n  | \"queen\"\n  | \"king\"\n  | null;\n\nfunction getPieceName(piece: Piece): PieceName {\n  switch (piece) {\n    case Piece.Pawn:\n      return \"pawn\";\n    case Piece.Knight:\n      return \"knight\";\n    case Piece.Bishop:\n      return \"bishop\";\n    case Piece.Rook:\n      return \"rook\";\n    case Piece.King:\n      return \"king\";\n    case Piece.Queen:\n      return \"queen\";\n    case Piece.Empty:\n      return null;\n  }\n}\n\nfunction getMoves(piece: Piece): Direction[] {\n  switch (piece) {\n    case Piece.Pawn:\n      return [\n        Direction.North,\n        Direction.North * 2,\n        Direction.North + Direction.West,\n        Direction.North + Direction.East,\n      ];\n    case Piece.Knight:\n      return [\n        Direction.North + Direction.North + Direction.East,\n        Direction.North + Direction.North + Direction.West,\n        Direction.West + Direction.West + Direction.North,\n        Direction.West + Direction.West + Direction.South,\n        Direction.South + Direction.South + Direction.West,\n        Direction.South + Direction.South + Direction.East,\n        Direction.East + Direction.East + Direction.South,\n        Direction.East + Direction.East + Direction.North,\n      ];\n    case Piece.Bishop:\n      return [\n        Direction.North + Direction.East,\n        Direction.North + Direction.West,\n        Direction.West + Direction.South,\n        Direction.South + Direction.East,\n      ];\n    case Piece.Rook:\n      return [Direction.North, Direction.West, Direction.South, Direction.East];\n    case Piece.Queen:\n    case Piece.King:\n      return [\n        Direction.North,\n        Direction.West,\n        Direction.South,\n        Direction.East,\n        Direction.North + Direction.East,\n        Direction.North + Direction.West,\n        Direction.West + Direction.South,\n        Direction.South + Direction.East,\n      ];\n    case Piece.Empty:\n      console.error(\"Error getting moves from empty piec\");\n      return [];\n  }\n}\n\nfunction isSlider(piece: Piece): boolean {\n  return (\n    piece === Piece.Bishop || piece === Piece.Rook || piece === Piece.Queen\n  );\n}\n\n// W for padding, P for opponent pieces, p for my pieces\nconst InitialColorsStr =\n  \"\\\nWWWWWWWWWWWW\\\nWWWWWWWWWWWW\\\nWWPPPPPPPPWW\\\nWWPPPPPPPPWW\\\nWW        WW\\\nWW        WW\\\nWW        WW\\\nWW        WW\\\nWWppppppppWW\\\nWWppppppppWW\\\nWWWWWWWWWWWW\\\nWWWWWWWWWWWW\";\n\nconst INITIAL_COLORS = InitialColorsStr.split(\"\").map((char) => {\n  switch (char) {\n    case \"W\":\n      return SquareColor.Wall;\n    case \"P\":\n      return SquareColor.OpponentPiece;\n    case \"p\":\n      return SquareColor.MyPiece;\n    case \" \":\n      return SquareColor.Empty;\n    default:\n      throw Error(\"Invalid InitialColorsStr\");\n  }\n});\n\nconst InitialPiecesStr =\n  \"\\\nWWWWWWWWWWWW\\\nWWWWWWWWWWWW\\\nWWRNBQKBNRWW\\\nWWPPPPPPPPWW\\\nWW        WW\\\nWW        WW\\\nWW        WW\\\nWW        WW\\\nWWppppppppWW\\\nWWrnbqkbnrWW\\\nWWWWWWWWWWWW\\\nWWWWWWWWWWWW\";\n\nconst INITIAL_PIECES = InitialPiecesStr.split(\"\").map((char) => {\n  switch (char.toUpperCase()) {\n    case \"W\":\n    case \" \":\n      return Piece.Empty;\n    case \"P\":\n      return Piece.Pawn;\n    case \"R\":\n      return Piece.Rook;\n    case \"N\":\n      return Piece.Knight;\n    case \"B\":\n      return Piece.Bishop;\n    case \"Q\":\n      return Piece.Queen;\n    case \"K\":\n      return Piece.King;\n    default:\n      throw Error(\"Invalid InitialPiecesStr\");\n  }\n});\n\nexport class BoardState {\n  boardPieces: Piece[];\n  boardColors: SquareColor[] = INITIAL_COLORS;\n  myCastling: [boolean, boolean] = [true, true]; // East - west\n  opponentCastling: [boolean, boolean] = [true, true]; // East - west, unused\n  enPassant: number | null = null; // square where I can capture en passant\n  kingPassant: number | null = null; // square where I could capture the castling king\n  constructor(color: \"white\" | \"black\") {\n    this.boardPieces = INITIAL_PIECES;\n    console.log(\"CONSTRUCTOR\", color);\n    if (color === \"black\") {\n      this.boardPieces[padPosition(3)] = Piece.King;\n      this.boardPieces[padPosition(4)] = Piece.Queen;\n      this.boardPieces[padPosition(60)] = Piece.Queen;\n      this.boardPieces[padPosition(59)] = Piece.King;\n    }\n  }\n}\n\nexport function makeMove(\n  boardState: BoardState,\n  start: number,\n  end: number\n): BoardState {\n  let paddedStart = padPosition(start);\n  let paddedEnd = padPosition(end);\n  console.log(start, end);\n  boardState.boardPieces[paddedEnd] = boardState.boardPieces[paddedStart];\n  boardState.boardColors[paddedEnd] = boardState.boardColors[paddedStart];\n  boardState.boardPieces[paddedStart] = Piece.Empty;\n  boardState.boardColors[paddedStart] = SquareColor.Empty;\n  if (end < 8 && boardState.boardPieces[paddedEnd] == Piece.Pawn) {\n    console.log(\"here\");\n    boardState.boardPieces[paddedEnd] = Piece.Queen;\n  }\n  if (start == 0) {\n    boardState.opponentCastling[0] = false;\n  } else if (start == 7) {\n    boardState.opponentCastling[1] = false;\n  } else if (start == 63) {\n    boardState.myCastling[1] = false;\n  } else if (start == 56) {\n    boardState.myCastling[0] = false;\n  }\n  if (boardState.boardPieces[paddedEnd] == Piece.King) {\n    if (boardState.boardColors[paddedEnd] == SquareColor.MyPiece) {\n      boardState.myCastling = [false, false];\n    } else {\n      boardState.opponentCastling = [false, false];\n    }\n  }\n  if (\n    boardState.boardPieces[paddedEnd] == Piece.King &&\n    Math.abs(end - start) == 2\n  ) {\n    let dir = Math.floor((end - start) / 2);\n    boardState.boardPieces[paddedStart + dir] = Piece.Rook;\n    boardState.boardColors[paddedStart + dir] =\n      boardState.boardColors[paddedEnd];\n    if (boardState.boardPieces[paddedEnd + dir] === Piece.Rook) {\n      boardState.boardPieces[paddedEnd + dir] = Piece.Empty;\n      boardState.boardColors[paddedEnd + dir] = SquareColor.Empty;\n    } else if (boardState.boardPieces[paddedEnd + dir + dir] === Piece.Rook) {\n      boardState.boardPieces[paddedEnd + dir + dir] = Piece.Empty;\n      boardState.boardColors[paddedEnd + dir + dir] = SquareColor.Empty;\n    } else {\n      console.error(\"Messed up castling, sorry\");\n    }\n  }\n  return boardState;\n}\n\nexport function getPossibleMoves(\n  boardState: BoardState,\n  nonPaddedPos: number\n): number[] {\n  let paddedReachables = getReachableSquares(\n    boardState,\n    padPosition(nonPaddedPos)\n  );\n  return paddedReachables.map(unpadPosition);\n}\n\nfunction getReachableSquares(\n  boardState: BoardState,\n  startPosition: number\n): number[] {\n  if (boardState.boardColors[startPosition] != SquareColor.MyPiece) {\n    return [];\n  }\n  const pieceMoving = boardState.boardPieces[startPosition];\n  const reachableSquares = [];\n  for (let moveDirection of getMoves(pieceMoving)) {\n    for (let k = 1; k <= 9; k++) {\n      let endPosition = startPosition + moveDirection * k;\n      let destinationColor = boardState.boardColors[endPosition];\n      // Illegal moves\n\n      // Hit board bounds or one of my pieces\n      if (\n        destinationColor === SquareColor.Wall ||\n        destinationColor === SquareColor.MyPiece\n      ) {\n        break;\n      }\n\n      // Illegal pawn moves\n      if (pieceMoving == Piece.Pawn) {\n        if (\n          (moveDirection == Direction.North ||\n            moveDirection == Direction.North + Direction.North) &&\n          destinationColor != SquareColor.Empty\n        ) {\n          break; // Can't capture moving up\n        }\n        if (\n          (moveDirection === Direction.North + Direction.West ||\n            moveDirection === Direction.North + Direction.East) &&\n          destinationColor === SquareColor.Empty &&\n          boardState.enPassant !== endPosition &&\n          boardState.kingPassant !== endPosition\n        ) {\n          break; // Can't move diagonally without capturing\n        }\n        if (\n          moveDirection == Direction.North + Direction.North &&\n          (startPosition < BoardInfo.A1 + Direction.North ||\n            boardState.boardColors[startPosition + Direction.North] !=\n              SquareColor.Empty)\n        ) {\n          break; // Can't move twice unless from second row and with empty square in front\n        }\n      }\n\n      // Move is probably fine (TODO except king stuff)\n      reachableSquares.push(endPosition);\n\n      // Castling stuff\n      if (\n        pieceMoving == Piece.King &&\n        (moveDirection == Direction.East || moveDirection == Direction.West)\n      ) {\n        if (\n          (moveDirection == Direction.East && !boardState.myCastling[0]) ||\n          (moveDirection == Direction.West && !boardState.myCastling[1])\n        ) {\n          break;\n        }\n        endPosition += moveDirection;\n        if (boardState.boardColors[endPosition] !== SquareColor.Empty) {\n          break;\n        }\n        if (\n          boardState.boardColors[endPosition + moveDirection] !==\n            SquareColor.Empty &&\n          boardState.boardPieces[endPosition + moveDirection] !== Piece.Rook\n        ) {\n          break;\n        }\n        reachableSquares.push(endPosition);\n      }\n\n      // Stop pieces that don't slide\n      if (!isSlider(pieceMoving)) {\n        break;\n      }\n\n      // Stop sliding after capture\n      if (destinationColor !== SquareColor.Empty) {\n        break;\n      }\n    }\n  }\n  return reachableSquares;\n}\n\ntype SquareDescription = {\n  color: \"mine\" | \"opponent\" | null;\n  name: PieceName;\n};\n\nexport function getPieces(board: BoardState): SquareDescription[] {\n  let squares: SquareDescription[] = [];\n  for (let i = 0; i < 64; i++) {\n    let padded_pos = padPosition(i);\n    let color = board.boardColors[padded_pos];\n    let colorName = null as \"mine\" | \"opponent\" | null;\n    if (color === SquareColor.MyPiece) colorName = \"mine\";\n    else if (color === SquareColor.OpponentPiece) colorName = \"opponent\";\n    squares.push({\n      color: colorName,\n      name: getPieceName(board.boardPieces[padded_pos]),\n    });\n  }\n  return squares;\n}\n","<script>\n  import { onMount } from \"svelte\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  let connection = null;\n  let out_url = null;\n\n  export function sendObject(obj) {\n    connection.send(JSON.stringify(obj));\n  }\n\n  function connectToInitiator(pid) {\n    // Please self host your own signaling server,\n    // see https://github.com/peers/peerjs-server\n    const peer = new Peer();\n    peer.on(\"open\", () => {\n      console.log(\"Peer opened, connecting to:\", pid);\n      connection = peer.connect(pid);\n      connection.on(\"open\", () => {\n        connection.on(\"data\", data => {\n          console.log(\"got data:\", data);\n          dispatch(\"onMessage\", JSON.parse(data));\n        });\n      });\n    });\n    peer.on(\"error\", err => {\n      console.error(err);\n      alert(err);\n    });\n\n    peer.on(\"connection\", conn => {\n      console.log(\"CONNECTED!\");\n      console.log(conn);\n    });\n  }\n\n  function createInitiator() {\n    // Please self host your own signaling server\n    // see https://github.com/peers/peerjs-server\n    const peer = new Peer();\n    peer.on(\"open\", function(id) {\n      console.log(\"My peer ID is: \" + id);\n      out_url = location.href + \"#\" + peer.id;\n    });\n\n    peer.on(\"error\", err => {\n      console.error(err);\n      alert(err);\n    });\n\n    peer.on(\"connection\", conn => {\n      connection = conn;\n      console.log(\"CONNECTED! with connection:\");\n      console.log(conn);\n      conn.on(\"data\", data => {\n        console.log(\"got data:\", data);\n        dispatch(\"onMessage\", JSON.parse(data));\n      });\n      conn.on(\"close\", () => {\n        console.error(\"connection closed\");\n        alert(\"Connection closed!\");\n      });\n    });\n  }\n\n  onMount(async () => {\n    const pid = location.hash.slice(1);\n    if (pid) {\n      console.log(\"connecting to \" + pid);\n      connectToInitiator(pid);\n    } else {\n      console.log(\"creating initiator peer\");\n      createInitiator();\n    }\n  });\n</script>\n\n<style>\n  p,\n  a {\n    text-align: center;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n    color: #333;\n  }\n</style>\n\n{#if !connection}\n  <p>Establishing connection...</p>\n  {#if out_url}\n    <a\n      href={out_url}\n      on:click|preventDefault={() => navigator.clipboard\n          .writeText(out_url)\n          .then(() => alert('Link copied! Send it to opponent'))}>\n      {out_url}\n    </a>\n  {/if}\n{/if}\n","<script>\n  import { BoardState, getPieces, getPossibleMoves, makeMove } from \"./chess\";\n  import WebRTCConnection from \"./WebRTCConnection.svelte\";\n  export let myColor;\n  let boardState = new BoardState(myColor);\n  let myTurn = myColor === \"white\";\n  let sendObject;\n\n  function onMessage(message) {\n    console.log(\"Got message\");\n    console.log(message);\n    let [from, to] = message.detail;\n    let tr = function(n) {\n      return 63 - n;\n    };\n    boardState = makeMove(boardState, tr(from), tr(to));\n    selected = null;\n    destinations = [];\n    myTurn = true;\n  }\n  console.log(boardState);\n\n  $: squares = getPieces(boardState);\n  function getImage(square) {\n    let color = myColor;\n    if (square.color === \"opponent\") {\n      color = myColor === \"white\" ? \"black\" : \"white\";\n    }\n    return `./images/${color}/${square.name}.svg`;\n  }\n  function onClick(i) {\n    if (!myTurn) {\n      return;\n    }\n    if (selected != null && destinations.includes(i)) {\n      destinations = [];\n      console.log(\"making move!\");\n      boardState = makeMove(boardState, selected, i);\n      sendObject([selected, i]);\n      myTurn = false;\n      selected = null;\n      return;\n    }\n    if (squares[i].color !== \"mine\") {\n      selected = null;\n      destinations = [];\n      return;\n    }\n    selected = i;\n    destinations = getPossibleMoves(boardState, i);\n  }\n  let selected = null;\n  let destinations = [];\n  $: possibleDestinations = squares.flatMap((s, i) =>\n    getPossibleMoves(boardState, i)\n  );\n  $: unreachables = squares.map(\n    (s, i) => s.color !== \"mine\" && !possibleDestinations.includes(i)\n  );\n</script>\n\n<style>\n  #board {\n    max-width: 80vh;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  .square {\n    width: calc(100% / 8);\n    float: left;\n    user-select: none;\n    height: 0;\n    padding-bottom: calc(100% / 8);\n  }\n  .dark {\n    background-color: #b58863;\n  }\n  .light {\n    background-color: #f0d9b5;\n  }\n  .selected {\n    box-shadow: 0px 0px 50px 20px rgba(20, 85, 30, 0.6) inset;\n    outline: 2px solid;\n    outline-color: rgba(0, 0, 0, 0.1);\n    outline-offset: -2px;\n  }\n  .unreachable {\n    background-color: #dcb;\n    width: 100%;\n    height: 0;\n    padding-bottom: 100%;\n  }\n\n  .move-dest {\n    box-shadow: 0px 0px 50px 6px rgba(20, 85, 30, 0.3) inset;\n  }\n  img {\n    width: 100%;\n    user-select: none;\n  }\n  h1,\n  p {\n    text-align: center;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n    color: #333;\n  }\n  p {\n    font-size: 1.4em;\n  }\n</style>\n\n<WebRTCConnection bind:sendObject on:onMessage={onMessage} />\n<h1>\n  {#if myTurn}Click a piece to play!{:else}Waiting for other player...{/if}\n</h1>\n<div id=\"board\">\n  {#each squares as square, i}\n    <div\n      class=\"square\"\n      class:dark={Math.floor((i * 9) / 8) % 2}\n      class:light={1 - (Math.floor((i * 9) / 8) % 2)}\n      class:selected={selected === i}\n      class:move-dest={destinations.includes(i)}\n      on:click={() => onClick(i)}>\n      {#if unreachables[i]}\n        <div class=\"unreachable\" />\n      {:else if square.color}\n        <img\n          src={getImage(square)}\n          alt={square.name}\n          draggable=\"false\"\n          ondragstart=\"return false;\" />\n      {/if}\n    </div>\n  {/each}\n  <p>\n    See rules on\n    <a href=\"https://en.wikipedia.org/wiki/Dark_chess\">wikipedia!</a>\n  </p>\n</div>\n","import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body,\n  props: { myColor: location.hash ? \"black\" : \"white\" },\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","toggle_class","toggle","classList","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","mount_component","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","d","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","padPosition","pos","Math","floor","unpadPosition","getPieceName","piece","INITIAL_COLORS","split","char","INITIAL_PIECES","toUpperCase","color","boardPieces","console","log","makeMove","boardState","start","end","paddedStart","paddedEnd","boardColors","opponentCastling","myCastling","abs","dir","error","getPossibleMoves","nonPaddedPos","startPosition","pieceMoving","reachableSquares","_a","getMoves","_i","moveDirection","k","endPosition","destinationColor","enPassant","kingPassant","getReachableSquares","preventDefault","dispatch","connection","out_url","connectToInitiator","pid","peer","Peer","on","connect","JSON","parse","err","alert","conn","createInitiator","id","location","href","hash","obj","send","stringify","navigator","clipboard","writeText","includes","undefined","o","outros","iterations","sendObject","myColor","BoardState","myTurn","onClick","selected","destinations","squares","board","padded_pos","colorName","getPieces","possibleDestinations","flatMap","s","unreachables","message","to","tr","n","square","body"],"mappings":"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"}